N-body simulation code flow:

- SIMPLE DETERMINISTIC HAMILTONIAN vs MCMC?



Define class to deal with vectors
    - ??
    - ??

Define class to hold info abt bodies
    - position (as an x,y vector)
    - velocity (as an x,y vector)
    - mass (in some arbitrary units (solar masses? easier not to have to worry about massive numbers)
        - we'll treat these as point masses

INITIALIZE

    PASS: initial phase space, initial masses

    RETURN: information correctly stored in the right classes?

    - set up ICs x_ij, v_ij (phase space) for N + m unknown bodies, masses M_i for N + m bodies
    - i is body index, j is dimension index

    optional:
    - zero the coordinate system to the initial center of mass and adjust coordinates? (might help make things tidy)
        x,y positions defined in terms of this initial CoM

    TESTS:


SINGLE ITERATION

    PASS: bodies, time interval

    RETURN: iterated bodies

    - based on current positions of bodies, calculate gravitational field
    - based on gravitational field, calculate where the bodies will be after t time
    - use 2D cartesian coordinates (assume problem is confined to the plane)
    - some sort of array of PDEs and an integrator to solve them

    - this step is going to need to be optimized as much as possible
    - boundary conditions?
    - values will stay in some sort of 'rest frame'

        TESTS:

WRAPPER TO ITERATE N_iter TIMES

    PASS:

    RETURN:

    TESTS:




- first test of complete simulation: kepler problem (single planet orbiting around very massive sun)

OBJECT-ORIENTED PROGRAMMING:
- define CLASSES - user-defined data structures (for body: mass, position, and velocity?)
- example:
    class body:
        # pass (this will just run the code without giving it an error- placeholder)

        # first have to INITIALIZE the class:
        def __init__(self, thing1, thing2):
            self.thing1 = thing1
            self.thing2 = thing2

        # a class ATTRIBUTE is something which is the same for all instances of the class

        attribute = thing3

        # can also define CHILD classes that step from the parent class, with further specifications